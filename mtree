#!/usr/bin/env python3
"""
A portable version of the BSD mtree utility, which maps a directory hierarchy.

Usage:
    mtree [-bCcDdejLlMnPqrStUuWx] [-i | -m] [-E tags] [-F flavor] [-f spec]
          [-I tags] [-K keywords] [-k keywords] [-N dbdir] [-O onlyfile]
          [-p path] [-R keywords] [-s seed] [-X exclude-file]
"""

import getopt
import sys


OPTS = "bCcDdejLlMnPqrStUuWximE:F:f:I:K:k:N:O:p:R:s:X:"

# Map hash keywords to hash names in hashlib.
HASHES = {
    "md5": "md5",
    "md5digest": "md5",
    "ripemd160digest": "ripemd160",
    "rmd160": "ripemd160",
    "rmd160digest": "ripemd160",
    "sha1": "sha1",
    "sha1digest": "sha1",
    "sha256": "sha256",
    "sha256digest": "sha256",
}


def usage(exc=None):
    """
    Print out usage sanely.
    """
    out = sys.stdout
    usage_doc = __doc__.rstrip()
    if exc is not None:
        out = sys.stderr
        usage_doc = "\n" + usage_doc[usage_doc.find("\n\n") :].lstrip()
        print("Error:", exc, file=out)
    print(usage_doc, file=out)
    if exc is None:
        return 0
    return 1


def main():
    try:
        opts, _ = getopt.getopt(sys.argv[1:], OPTS)
    except getopt.GetoptError as exc:
        return usage(exc)

    print(opts)
    return 0


if __name__ == "__main__":
    sys.exit(main())
